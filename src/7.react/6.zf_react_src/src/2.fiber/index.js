/**
 * NOTE
 *  A:什么是fiber？
 *    1. fiber是一个可执行单元，每次执行完一个执行单元，React都会检查还剩余多少时间，如果没有时间就会将控制权交出去；
 *    2. fiber架构是表示可以通过某些调度策略合理的分配CPU资源，从而提高用户的响应速度，通过该架构，可以让自己的调度过程变成可被中断，适时的让出CPU控制权，从而让更加紧急的任务得到处理；
 *    3. fiber也会是一种数据结构，每个virtualDOM节点内部表示为一个Fiber；
 *       a:一个节点包含了三个属性：return：父节点、silbling：兄弟元素，child：子节点
 *       b:遍历节点处理时为深度优先遍历中的后序遍历(即先处理子节点及其兄弟节点，最后处理自己)，每一个节点的遍历就是一个idle(requestIdleCallback)任务;
 * NOTE：
 *  B:为什么需要fiber？
 *    1. 在协调期间，react会一直占用着浏览器资源，可能会存在无法立即响应用户触发的事件，或者调至掉帧，用户可能会感到卡顿；
 *
 * NOTE:
 *  C:fiber之前是什么样的？
 *    1. react之前会一次性递归比对virtualDOM，找出需要变动的节点，然后同步更新它们，这个过程react称之为Reconciliation(协调)；
 *    2. 在协调期间，如果中断了比较，则需要再次重新开始；
 *
 *  NOTE：
 *   D: Fiber执行阶段：
 *     1. 每次渲染都分为俩个阶段：
 *        a): Reconciliation协调阶段：可以认为主要是diff阶段，这个阶段可以被打断，该阶段主要是找出所有的节点变更(effect副作用)，例如增删改节点等，
 *        b): Commit(提交阶段)：会将上一阶段处理的副作用一次执行完成，这个阶段必须是同步的，不能被打断；
 */
